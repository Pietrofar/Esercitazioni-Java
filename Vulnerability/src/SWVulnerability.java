
import java.util.Objects;

public class SWVulnerability extends Vulnerability {
    //Attributi della classe.
    private String softwere;
    private int ports;

    // Costruttore
    public SWVulnerability(int severity, boolean attackPattern, String softwere, int ports) {
        super(severity, attackPattern);
        this.softwere = softwere;
        this.ports = ports;
    }
    
    //Metodo getter di softwere.SW

    //Metodo getter di softwere.
    public String getSoftwere(){
        return softwere;
    }

    //Metodo setter di softwere.
    public void setSoftwere (String softwere){
        this.softwere = softwere;
    }

    //Metodo getter di ports.
    public int getPorts(){
        return  ports;        
    }

    //Metodo setter di ports.
    public void setPorts(int ports){
        this.ports = ports;
    }

    //Definizione del metodo fix.
    @Override
    public void fix() {
       setPorts(0);  //Una vulnerabilità SW è risolta chiudendo i suoi port di comunicazione ports=0.
    }

    //Ovveride del metodo equals.
    @Override
    public boolean equals(Object obj) {
        if(obj == this){              //Controllo se i riferimenti sono gli stessi.
            return true;
        }

        if(!(obj instanceof SWVulnerability)){  //Controllo che obj sia un'istanza di SWVulnerability.
            return false;             
        }

        SWVulnerability other = (SWVulnerability) obj; //Casting di obj.
        return softwere.equals(other.softwere);  // SW sono uguali se riguardano lo stesso software.
    }

    //Ovveride dell'HashCode per garantire coerenza.
    @Override
    public int hashCode() {
        return Objects.hash(softwere);
    }

    @Override
    public String toString() {
        return "Severity: " + this.getSeverity() + " | AttackPattern: " + this.getAttackPattern() + " | Softwere: " +
        softwere + " | Ports: " + ports;
    }  

        
}
