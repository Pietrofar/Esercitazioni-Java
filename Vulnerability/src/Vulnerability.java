public abstract class Vulnerability implements Exploitable{
    private int severity;
    private boolean attackPattern;

    // Costruttore 
    public Vulnerability(int severity, boolean attackPattern) {
        this.severity = severity;
        this.attackPattern = attackPattern;
    }
    

    //Metodo getter per ottenere severity.V

    //Metodo getter per ottenere severity.
    public int getSeverity(){
        return severity;
    }
    
    //Metodo setter per settare severity.
    public void setSeverity(int severity){
        this.severity = severity;
    }   

    //Metodo getter per ottenere attackPattern.
    public boolean getAttackPattern(){
        return attackPattern;
    }

    //Metodo setter per settare l'attackPattern.
    public void setAttackPattern(boolean attackPattern){
        this.attackPattern = attackPattern;
    }

    @Override //Ridefiniamo il metodo checkExploitable.
    //Verifica del livello di severity/presenza di un attackPattern.
    public boolean checkExploitable() {
       if(severity >= 2 && attackPattern == true){  
        return true;
       }
       else{
        return false;
       }
    }

    //Metodo astratto fix() da definire.
    @Override
    public abstract void fix();  

    @Override
    public String toString() {
        return "Severity: |" + severity + " AttackPattern: " + attackPattern;
    }

    

}
