public class Lista {
    // Creazione del primo elemento (testa della lista).
    private Nodo testa;

    public Lista() {
        testa = null;
    }

    //Metodo aggiungi nuovo nodo.
    public void aggiungi(Vulnerability data){
        Nodo nuovoNodo = new Nodo(data);

        nuovoNodo.setNext(testa); // Il nuovo nodo punta al vecchio primo elemento.
        testa = nuovoNodo;   // Il nuovo nodo è ora la testa dell lista.
    }

    //Metodo rimuovi elemento dalla lista
    public void rimuovi(Vulnerability data){
        if(testa == null){    // Lista vuota
            return;
        }

        // Caso in cui l'elemento è la testa:
        if(testa.getData().equals(data)){
            testa = testa.getNext();
            return;
        }

        Nodo precedente = testa;
        Nodo corrente = testa.getNext();

        while(corrente != null){
            if(corrente.getData().equals(data)){
                precedente.setNext(corrente.getNext());
            }

            precedente = corrente;
            corrente = corrente.getNext();
        }


    }
    
    public void stampa(){
        Nodo nodoCorrente = testa;
        System.out.println();
    
        while(nodoCorrente != null){
            System.out.println(nodoCorrente);
            nodoCorrente = nodoCorrente.getNext();
        }
        
    }

    // Metodo che rimuove le vulnerabilità non exploitable.
    public void removeNotExploitable(){
        Nodo corrente = testa;

        while(corrente != null){
            if(!(corrente.getData().checkExploitable())){
                rimuovi(corrente.getData());
            }

            corrente = corrente.getNext();
        }
    }

    // Metodo numberExploitable restituisce il numero di vulnerabilità SW e HW che sono exploitable.
    public void numberExploitable(){
        int numSW = 0;
        int numHW = 0;

        Nodo corrente = testa;

        while(corrente != null){
            if(corrente.getData().checkExploitable() && (corrente.getData() instanceof SWVulnerability)){
                numSW++;
            }

            else if(corrente.getData().checkExploitable() && (corrente.getData() instanceof HWVulnerability)){
                numHW++;
            }

            corrente = corrente.getNext();
        }

        System.out.println("Numero di SWvulnerability: " + numSW + "");
        System.out.println("Numero di HWvulnerability: " + numHW + "");
    }
    

}
